name: CMake - Build and test

on:
  push:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Install Dependencies
        run: sudo apt update && sudo apt install automake g++ autotools-dev autoconf m4 zlib1g-dev cmake libtool libssl-dev

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/out

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/out
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Code Format
        shell: bash
        working-directory: ${{runner.workspace}}/out
        run: make format

      - name: Build
        working-directory: ${{runner.workspace}}/out
        shell: bash
        # Execute the build.  You can specify a specific target.
        run: make -j$(nproc)

      - name: Run Tests
        working-directory: ${{runner.workspace}}/out
        shell: bash
        run: ctest --rerun-failed --output-on-failure .
